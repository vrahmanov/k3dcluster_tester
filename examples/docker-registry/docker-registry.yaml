apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: registry
    release: docker-registry-ui
    app/version: "1.2.1"
  name: docker-registry
spec:
  storageClassName: manual
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: 1Gi
---      
apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-registry
  labels:
    app: registry
    release: docker-registry-ui
    app/version: "1.2.1"
data:
  config.yml: |-
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      delete:
        enabled: true
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
        Access-Control-Allow-Origin: ['*']
        Access-Control-Allow-Methods: ['HEAD', 'GET', 'OPTIONS', 'DELETE']
        Access-Control-Allow-Headers: ['Authorization', 'Accept']
        Access-Control-Max-Age: [1728000]
        Access-Control-Allow-Credentials: [true]
        Access-Control-Expose-Headers: ['Docker-Content-Digest']      
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  labels:
    app: registry
    release: docker-registry-ui
    app/version: "1.2.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registry
      release: docker-registry-ui
  template:
    metadata:
      labels:
        app: registry
        release: docker-registry-ui
    spec:
      volumes:
        - name: config
          configMap:
            defaultMode: 420
            name: docker-registry
        - name: data
          persistentVolumeClaim:
            claimName: docker-registry
      containers:
        - name: registry
          image: "docker.io/registry:2.7"
          imagePullPolicy: Always
          ports:
            - name: registry
              containerPort: 5000
              protocol: TCP
          volumeMounts:
            - mountPath: "/var/lib/registry"
              name: "data"
            - mountPath: "/etc/docker/registry"
              name: "config"
          livenessProbe:
            httpGet:
              path: /v2/
              port: registry
          readinessProbe:
            httpGet:
              path: /v2/
              port: registry
          resources:
            {}
---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry
  labels:
    app: registry
    release: docker-registry-ui
    app/version: "1.2.1"
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: registry
      protocol: TCP
      name: registry
  selector:
      app: registry
      release: docker-registry-ui
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry-ui
  labels:
    app: registry-ui
    release: docker-registry-ui
    app/version: "1.2.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registry-ui
      release: docker-registry-ui
  template:
    metadata:
      labels:
        app: registry-ui
        release: docker-registry-ui
    spec:
      containers:
        - name: registry-ui
          image: "docker.io/joxit/docker-registry-ui:1.5-static"
          imagePullPolicy: Always
          env:
            - name: REGISTRY_TITLE
              value: "Docker registry UI"
            - name: DELETE_IMAGES
              value: "false"
            - name: REGISTRY_URL
              value: "http://docker-registry.default:5000"
            - name: PULL_URL
              value: "docker-registry-ui.default:80"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry-ui
  labels:
    app: registry-ui
    release: docker-registry-ui
    app/version: "1.2.1"
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
      app: registry-ui
      release: docker-registry-ui
---                  
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: registry
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
spec:
  rules:
    - host: registry.fuf.me
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: docker-registry-ui
                port:
                  number: 80
---
